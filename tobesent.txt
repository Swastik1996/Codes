void PHI(int n){
  vector<int> phi(n);
  for(int i = 1; i < n; ++i)phi[i] = i;
  for(int i = 2; i < n; ++i)
    if(phi[i] == i)
      for(int j = i;j < N;j+=i)
        phi[j] -= phi[j]/i;
}
void MOB(int n){
  vector<int> mob(n);
  for(int i = 1; i < n ; ++i)mob[i] = 1;
  for(int i = 2; i < N ; i++){
    if(pf[i] == i){
      if(1LL * i * i < N){
        for(int j = i*i ; j < N ; j += (i*i) ){
          mob[j] = 0;
        }
      }
      for(int j = i ; j < N ; j+=i){
        mob[j] *= -1;
      }
    }
  }
}
template<typename T>
struct BIT 
{
  vector<T> t;
  int n;
  BIT(int nn) { n = nn;t.assign(n,0);}
  void update(int i, T val){for(;i <= n;i += i & -i)t[i] += val;}
  T query(int i) {T ans = 0; for(;i > 0; i -= i & -i) ans += t[i]; return ans;}
};
struct Edge {
  int from, to, cap, flow, index;
  Edge(int from, int to, int cap, int flow, int index) :
    from(from), to(to), cap(cap), flow(flow), index(index) {}
};

struct PushRelabel {
  int n;
  vector<vector<Edge> > G;
  vector<ll> excess;
  vector<int> dist, active, count;
  queue<int> Q;

  PushRelabel(int n) : n(n), G(n), excess(n), dist(n), active(n), count(2*n) {}

  void AddEdge(int from, int to, int cap) {
    G[from].push_back(Edge(from, to, cap, 0, G[to].size()));
    if (from == to) G[from].back().index++;
    G[to].push_back(Edge(to, from, 0, 0, G[from].size() - 1));
  }

  void Enqueue(int v) { 
    if (!active[v] && excess[v] > 0) { active[v] = true; Q.push(v); } 
  }

  void Push(Edge &e) {
    int amt = int(min(excess[e.from], ll(e.cap - e.flow)));
    if (dist[e.from] <= dist[e.to] || amt == 0) return;
    e.flow += amt;
    G[e.to][e.index].flow -= amt;
    excess[e.to] += amt;    
    excess[e.from] -= amt;
    Enqueue(e.to);
  }
  
  void Gap(int k) {
    for (int v = 0; v < n; v++) {
      if (dist[v] < k) continue;
      count[dist[v]]--;
      dist[v] = max(dist[v], n+1);
      count[dist[v]]++;
      Enqueue(v);
    }
  }

  void Relabel(int v) {
    count[dist[v]]--;
    dist[v] = 2*n;
    for (int i = 0; i < G[v].size(); i++) 
      if (G[v][i].cap - G[v][i].flow > 0)
  dist[v] = min(dist[v], dist[G[v][i].to] + 1);
    count[dist[v]]++;
    Enqueue(v);
  }

  void Discharge(int v) {
    for (int i = 0; excess[v] > 0 && i < G[v].size(); i++) Push(G[v][i]);
    if (excess[v] > 0) {
      if (count[dist[v]] == 1) Gap(dist[v]); 
      else Relabel(v);
    }
  }

  ll GetMaxFlow(int s, int t) {
    count[0] = n-1;
    count[n] = 1;
    dist[s] = n;
    active[s] = active[t] = true;
    for (int i = 0; i < G[s].size(); i++) {
      excess[s] += G[s][i].cap;
      Push(G[s][i]);
    }
    
    while (!Q.empty()) {
      int v = Q.front();
      Q.pop();
      active[v] = false;
      Discharge(v);
    }
    
    ll totflow = 0;
    for (int i = 0; i < G[s].size(); i++) totflow += G[s][i].flow;
    return totflow;
  }
};
int gl = 0;
int u[N],d[N],low[N],par[N];
vi G[N];
void dfs1(int node,int dep){ //find dfs_num and dfs_low
  u[node]=1; 
  d[node]=dep;low[node]=dep;
  for(auto it : G[node]){
    if(!u[it]){
      par[it]=node;
      dfs1(it,dep+1);
      low[node]=min(low[node],low[it]);
      /*if(low[it] > d[node] ){
          node-it is cut edge/bridge
      }*/
      /*
      if(low[it] >= d[node] && (par[node]!=-1 || sz(G[node]) > 2)){
          node is cut vertex/articulation point
      }
      */
    }else if(par[node]!=it) low[node]=min(low[node],low[it]); 
    else par[node]=-1;
  }
}
int cmp2[N],a[N],dep[N];vi Gt[N];
void dfs2(int node,int cid,int h,int k){ //making "Bridge tree"
  u[node]=1; cmp2[node]=cid;
  a[cid] = k;
  for(auto it : G[node]){
    if(!u[it]){
      if(low[it]>d[node]){
        Gt[cid].pb(gl);
        dep[gl]=h+1;
        dfs2(it,gl++,h+1,0);
      }
      else dfs2(it,cid,h,1);
    }
  }
}
int pl[N],path[N];
void dfst(int node){ //Furthest 2 nodes of a node
  if(u[node]) return;
  u[node]=1;
  path[node]=0;
  pl[node]=0;
  int x=0,y=0;
  for(auto it : G[node]){
    dfst(it);
    path[node]=max(path[node],path[it]+1);
    pl[node]=max(pl[it],pl[node]);
    int z=path[it]+1;
    if(z>y&&z>x) {y=x;x=z;} else if(z>y) y=z;
  }
  pl[node]=max(pl[node],x+y);
}
ll dist[N]; // fill it with LLONG_MAX
int par[N];
priority_queue<pair<ll,int>,vector<pair<ll,int> >,greater<pair<ll,int> > > q;
void dijkstra(int n,int node){ 
    dist[node] = 0;
    q.push({dist[node],node});
    while(!q.empty()){
       int u = q.top().S;q.pop();
       for(auto p : G[u]){
          if(dist[p.F] > dist[u] + p.S){
            dist[p.F] = dist[u] + p.S;
            par[p.F] = u;
            q.push({dist[p.F],p.F});
          }
       }
    }
}

void FORD(int node){
    dist[node] = 0;
    for(int x = 1; x <= n ; ++x){
        for(auto e : E){
          int i = e.S.F;
          int j = e.S.S;
          int w = e.F;
          if(dist[j] > dist[i] + w){
            if(x == n){
              printf("NEG");return;
            }
            dist[j] = dist[i] + w;
          }
        }
    }
}
vector<int> G[N];
int dep[N];
int _n = 0;
int pos[N],LCA[20][2*N];
void dfs(int v,int p,int d){
	pos[v] = _n;
	dep[v] = d;
	LCA[0][_n] = v;
	_n++;
	for(int it : G[v]){
		if(it != p){
			dfs(it,v,d+1);
		}
	}
	if(p != -1){
		LCA[0][_n] = p;
		_n++;
	}
}
void LCApre(){
	for(int i = 1; i < 20 ; ++i){
		for(int j = 0 ; j  + (1<<(i-1)) < _n; ++j){
			if(dep[LCA[i-1][j]] < dep[LCA[i-1][j+(1<<(i-1))]])LCA[i][j] = LCA[i-1][j];
			else LCA[i][j] = LCA[i-1][j+(1<<(i-1))];
		}
	}
}
int lca(int u,int v){
	u = pos[u];
	v = pos[v];
	if(u > v)swap(u,v);
	int lg2 = 31 - __builtin_clz(v-u+1);
	int c1 = LCA[lg2][u];
	int c2 = LCA[lg2][v - (1<<lg2) + 1];
	if(dep[c1] < dep[c2])return c1;
	return c2;
}
struct MCMF {
	typedef int ctype;
	struct Edge { int x, y; ctype cap, cost; };
	vector<Edge> E;vector<int> adj[N];
	int n, prev[N];ctype dist[N],phi[N];

	MCMF(int size) : n(size) {}

	void add(int x, int y, ctype cap, ctype cost) {  
		adj[x].pb(sz(E)); E.push_back({x,y,cap,cost});
		adj[y].pb(sz(E)); E.push_back({y,x,0,-cost});
	}

	void mcmf(int s, int t, ctype &flowVal, ctype &flowCost) {
		flowVal = flowCost = 0; fill(phi,0);
		while (true) {
			fill(prev,-1);
			FOR(i,0,n-1) dist[i] = 1e9;
			dist[s] = prev[s] = 0;

			set<pair<ctype,int> > Q;
			Q.insert({dist[s],s});
			while (!Q.empty()){
				int x = Q.begin()->S;
				Q.erase(Q.begin());
				for(it : adj[x]) {
					const Edge &e = E[it];
					if (e.cap <= 0) continue;
					ctype cc = e.cost + phi[x] - phi[e.y];                    // ***
					if (dist[x] + cc < dist[e.y]) {
						Q.erase({dist[e.y], e.y});
						dist[e.y] = dist[x] + cc;
						prev[e.y] = it;
						Q.insert({dist[e.y], e.y});
					}
				}
			}
			if (prev[t] == -1) break;

			ctype z = 1e9;
			for (x = t; x != s; x = E[prev[x]].x) z = min(z, E[prev[x]].cap);
			for (x = t; x != s; x = E[prev[x]].x)
				{ E[prev[x]].cap -= z; E[prev[x]^1].cap += z; }
			flowVal += z;
			flowCost += z * (dist[t] - phi[s] + phi[t]);
			FOR(i,0,n-1) if (prev[x] != -1) phi[x] += dist[x];     // ***
		}
	}
};
int main(){
  
  clock_t tm = clock();
  fast;
  int __t = 1;
  //cin >> __t;
  FOR(_t,1,__t){
      	int n;
      	cin >> n;
      	FOR(i,0,n-1){
      		cin >> a[i].F >> a[i].S;
      	}
      	FOR(i,0,n-1){
      		cin >> b[i].F >> b[i].S;
      	}
      	MCMF *mc = new MCMF(2*n+10);
      	FOR(i,0,n-1){
      		FOR(j,0,n-1){
      			int dist = abs(a[i].F - b[j].F) + abs(a[i].S - b[j].S);
      			mc->add(i,j+n,100,dist);
      		}
      	}
      	FOR(i,0,n-1){
      		mc->add(2*n,i,1,0);
      	}
      	FOR(i,n,2*n-1){
      		mc->add(i,2*n+1,1,0);
      	}
      	int a1,a2;
      	mc->mcmf(2*n,2*n+1,a1,a2);
      	assert(a1 == n);
      	cout << a2 << "\n";
  }
  tm = clock()-tm ;
  cerr << (float)(tm)/CLOCKS_PER_SEC << "\n";
  return 0;
}
int A[]={2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97};
ll mulmod(ll a,ll b,ll mod){
    a%=mod;b%=mod;
	long double res=a;
	res*=b;
	ll c=(ll)(res/mod);
	a*=b;
	a-=c*mod;
	a%=mod;
	if(a<0)a+=mod;
	return a;
}
ll expo(ll a,ll b,ll c = mod){
	if(!b)return 1;
	ll temp = expo(a,b/2,c);
	temp = temp*temp%c;
	if(b&1)temp = temp*a%c;
	return temp;
}
bool Miller(ll p){
    if(p<2){
        return false;
    }
    if(p!=2 && p%2==0){
        return false;
    }
    for(int i=0;i<25;i++){
		if(p==A[i])return true; 
		else if(p%A[i]==0)return false;
    }	
    ll s=p-1;
    ll d=0;
    while(s%2==0){
        s/=2;d++;
    }
    for(int i=0;i<3;i++)
	{	
		ll a=rand()%(p-1)+1,temp=s;
		ll mod=expo(a,temp,p);
		if(mod==1||mod==p-1) continue;
		int flag=0;
		for(int j=1;j<d;j++)
		{
			mod=mulmod(mod,mod,p);
			if(mod==1)return false;
			if(mod==p-1)
			{	flag=1;
				break;
			}
		}
		if(flag)continue; 
		return false;
	}
	return true;
}
vector<vi> P;
vector<pair<ii,int> > M;
int n;
void Suffix(string s){
  n = sz(s);
  P.pb(vi(n,0));M.resize(n);
  FOR(i,0,n-1)P[0][i] = s[i]-'a';
  for(int s = 1,l = 1; s < n ; s*=2,l++){
    P.pb(vi(n,0));
    FOR(i,0,n-1)M[i] = {{P[l-1][i],(i+s<n?P[l-1][i+s]:-1)},i};
    sort(M.begin(), M.end());
    FOR(i,0,n-1){
      P[l][M[i].S] = ((i>0 && M[i].F == M[i-1].F) ? P[l][M[i-1].S] : i);
    }
  }
}
int LCP(int i,int j){
  int len = 0;
  if(i == j)return n-i;
  for(int k = sz(P)-1; k >=0 && i < n && j < n; k--){
    if(P[k][i] == P[k][j]){
      i += (1<<k);j += (1<<k);len += (1<<k);
    }
  }
  return len;
}
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> ii;

#define fill(a,x) memset(a,x,sizeof(a)) 
#define pb push_back
#define sz(x) (int)x.size() 
#define F first
#define S second
#define FOR(i,a,b) for(int i = a; i<=b; ++i)
#define NFOR(i,a,b) for(int i = a; i>=b; --i)
#define fast ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
const ll INF = 1e18;
const int mod = 1e9+7;
const int N = 1e5+10; 

int main(){
  fast;
  
  return 0;
}
